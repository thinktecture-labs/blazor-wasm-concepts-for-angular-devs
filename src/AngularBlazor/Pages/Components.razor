@page "/Components"

<h3>Components</h3>

<h4>Overlaps/Differences:</h4>
<ul>
    <li>Both can have all in one file or seperated files</li>
    <li>In Angular you have to declare a selector, in Blazor ComponentName = Selector</li>
    <li>Angular has Directives and Pipes</li>
    <li class="nested-list">
        <ul>
            <li>Directives: Access/Manipulate Components or HTML-Elements</li>
            <li>Pipes: Transform data before display</li>
        </ul> 
    </li>
    <li>No Directives in Blazor</li>
    <li>Both can have scoped styles</li>
    <li>@@Input() in Angular for input parameter, @@Output for events</li>
    <li>[Parameter] in Blazor for Parameters and Events. Events have to be EventCallback</li>
</ul>

<h4>Angular Code:</h4>
<pre class="language-typescript">
    <code class="language-typescript">@@Component(
{
    selector: 'my-component',
    template: '@("<h1>This is my Angular component</h1><button (click)=\"buttonClick()\">Click me!</button")'
})
export class AngularComponent {
    @@Input()
    public string myParameter;

    public buttonClick() {
        console.log('Button clicked!');
    }
}


Usage:
@("<my-component myParameter=\"Hello World!\"></my-component>")</code>
</pre>
<h4>Blazor Code:</h4>
<pre class="language-csharp">
    <code class="language-csharp">@("<h1>This is a Blazor test component</h1>")
@("<button @onclick=ButtonClick>Click me!</button>")
@@code {
    private void ButtonClick() {
        Console.WriteLine(\"Button clicked!\");
    }
}</code>
</pre>
<h4>Example:</h4>
<SampleComponent MyParameter="@Text" ButtonClicked="@ButtonClicked"></SampleComponent>

<div class="card mb-3">
    <div class="card-body">
        Button inside of sample component clicked <span class="text-success">@Counter</span> times.
    </div>
</div>