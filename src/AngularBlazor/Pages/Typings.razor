@page "/typings"

<MudText Typo="Typo.h3">Typings</MudText>
<MudTabs Elevation="1">
    <MudTabPanel Text="Angular sample">

        <pre class="language-typescript">
   <code class="language-typescript">interface Person {
   firstName: string;
   lastName: string;
}

// With typing
const person:Person = { firstName: 'Leia', lastName: 'Organa' };

// Ouput = Hello Leia Organa
console.log(`Hello ${person.firstName} ${person.lastName}`);

// Without typing - automatically declared as any
const secondPerson = { firstName: 'Luke', lastName: 'Skywalker' };

// Ouput = Hello Luke Skywalker
console.log(`Hello ${secondPerson.firstName} ${secondPerson.lastName}`);

// alternative property access especially when your are doing generic stuff
secondPerson['firstName'] = 'Han';
secondPerson['lastName'] = 'Solo';</code>

// Ouput = Hello Han Solo
console.log(`Hello ${secondPerson.firstName} ${secondPerson.lastName}`);
</pre>
    </MudTabPanel>
    <MudTabPanel Text="Blazor sample">
        <pre class="language-csharp">
        <code class="language-csharp">class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
}

var firstPerson = new Person
{
    FirstName = "Leia",
    LastName = "Organa"
};

// Ouput = Hello Leia Organa
Console.WriteLine($"Hello {firstPerson.FirstName} {firstPerson.LastName}");

// Get property value
// Result is object and has to be casted to specific type
var propertyValue = firstPerson.GetType().GetProperty("FirstName")?.GetValue();

// Set property value
// Only works for objects that are typed. NOT for dynamics
firstPerson.GetType().GetProperty("FirstName")?.SetValue(firstPerson, "Han");
firstPerson.GetType().GetProperty("LastName")?.SetValue(firstPerson, "Solo");

// Ouput = Hello Han Solo
Console.WriteLine($"Hello {firstPerson.FirstName} {firstPerson.LastName}");

// Using ExpandoObject to access properties dynamically
dynamc firstPerson = new ExpandoObject();
firstPerson.FirstName = "Leia";
firstPersion.LastName = "Organa";

@("((IDictionary<String, Object>) firstPerson)[\"FirstName\"] = \"Han\";")
@("((IDictionary<String, Object>) firstPerson)[\"LastName\"] = \"Solo\";")

// Ouput = Hello Han Solo
Console.WriteLine($"Hello {firstPerson.FirstName} {firstPerson.LastName}");
</code></pre>
    </MudTabPanel>
    <MudTabPanel Text="Use case">
            <MudList>
                <MudListItem Icon="@Icons.Material.Bookmark">Define simple a simple class or interface</MudListItem>
                <MudListItem Icon="@Icons.Material.Bookmark">Create an object that is an instance of this class/interface</MudListItem>
                <MudListItem Icon="@Icons.Material.Bookmark">Get/set properties of this object by their propertyname</MudListItem>
            </MudList>
        </MudTabPanel>
    <MudTabPanel Text="Use case in action">
        <MudAlert Severity="Severity.Info">This example is written in Blazor!</MudAlert>
        <MudCard>
            <MudCardContent>
                <h3>Typed object</h3>
                <MudText Inline="true">Hello </MudText>
                <MudText Inline="true" Color="Color.Primary">@_examplePerson.FirstName</MudText> (Field FirstName)
                <MudText Inline="true" Color="Color.Info">@_examplePerson.LastName</MudText> (Field LastName)
                <br>
                <MudDivider />
                <br>
                <h3>Expando object</h3>
                <MudText Color="Color.Secondary">@_expandoPerson.FirstName @_expandoPerson.LastName</MudText>
            </MudCardContent>
        </MudCard>

        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="6">
                        <MudSelect T="string" Label="Field name" @bind-Value="_fieldName">
                            @foreach (var fieldname in _fieldnames)
                            {
                                <MudSelectItem Value="@fieldname">@fieldname</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="string" @bind-value="_fieldValue" Label="Field value"></MudTextField>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ChangeFieldValue">Change field value</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
</MudTabs>