@page "/typings"

<MudText Typo="Typo.h3">Typings</MudText>
<MudTabs Elevation="1">
    <MudTabPanel Text="Use case">
        <MudList>
            <MudListItem Icon="@Icons.Material.Bookmark">Define simple a simple class or interface</MudListItem>
            <MudListItem Icon="@Icons.Material.Bookmark">Create an object that is an instance of this class/interface</MudListItem>
            <MudListItem Icon="@Icons.Material.Bookmark">Get/set properties of this object by their propertyname</MudListItem>
        </MudList>
    </MudTabPanel>
    <MudTabPanel Text="Angular">

        <pre class="language-typescript">
   <code class="language-typescript">interface Person {
   firstName: string;
   lastName: string;
}

// TypeScript code

// With typing
const person:Person = { firstName: 'Leia', lastName: 'Organa' };
console.log(`Hello ${person.firstName} ${person.lastName}`);

// Without typing - automatically declared as any
const secondPerson = { firstName: 'Luke', lastName: 'Skywalker' };
console.log(`Hello ${person.firstName} ${person.lastName}`);

// alternative property access especially when your are doing generic stuff
secondPerson['firstName'] = 'Han';
secondPerson['lastName'] = 'Solo';</code>
</pre>
    </MudTabPanel>
    <MudTabPanel Text="Blazor">
        <pre class="language-csharp">
        <code class="language-csharp">class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
}

var firstPerson = new Person
{
    FirstName = "Leia",
    LastName = "Organa"
};

Console.WriteLine($"Hello {firstPerson.FirstName} {firstPerson.LastName}");

dynamic secondPerson = new {irstName = "Luke", LastName = "Skywalker"};
Console.WriteLine($"Hello {secondPerson.FirstName} {secondPerson.LastName}");

// NOT WORKING
secondPerson["FirstName"] = "Han";
secondPerson["LastName"] = "Solo";

Console.WriteLine($"Hello {secondPerson.FirstName} {secondPerson.LastName}");

// Get property value
// Result is object and has to be casted to specific type
var propertyValue = firstPerson.GetType().GetProperty("FirstName")?.GetValue();

// Set property value
// Only works for objects that are typed. NOT for dynamics
firstPerson.GetType().GetProperty("FirstName")?.SetValue(firstPerson, "Han");
firstPerson.GetType().GetProperty("LastName")?.SetValue(firstPerson, "Solo");

Console.WriteLine($"Hello {firstPerson.FirstName} {firstPerson.LastName}");</code>
        </pre>
    </MudTabPanel>
    <MudTabPanel Text="In Action">
        <div class="card mb-3">
            <div class="card-header">
                Result
            </div>
            <div class="card-body">
                <b>Hello <span class="text-primary">@_examplePerson.FirstName</span> <span class="text-info">@_examplePerson.LastName</span></b>
            </div>
        </div>


        <div class="input-group mb-3">
            <select class="form-control" @bind="_fieldName">
                @foreach (var fieldname in _fieldnames)
                {
                    <option value="@fieldname">@fieldname</option>
                }
            </select>
        </div>
        <div class="input-group mb-3">
            <input class="form-control" type="text" @bind="_fieldValue" placeholder="Property value">
        </div>
        <div class="input-group">
            <button class="btn btn-primary" @onclick="ChangeFieldValue">Change Field Value</button>
        </div>
    </MudTabPanel>
</MudTabs>